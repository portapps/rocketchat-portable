// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Rocket.Chat.lnk (1.776kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resRocketChatLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x4f\x48\x14\x6f\x1c\xc6\x3f\xab\xfb\xc3\xdf\x42\x84\x81\x04\x42\xe5\x20\x6e\x18\xe1\xa4\x96\x82\x5b\x81\xf2\xee\xd6\xc0\x6a\x0e\xae\x82\x94\x81\xcb\xf4\x86\x83\x3b\xce\x36\x33\xd9\x6e\x42\xb7\x2e\x52\x1d\xba\x74\x29\x5c\x24\x28\x82\x0e\x41\x5d\xa5\xc8\x3a\x86\x07\x03\x4f\x95\x75\x11\x09\x3a\x74\x8a\x88\x62\xc6\xd1\xb4\xfc\x43\xdd\x8a\x9e\xc3\xfb\xdd\x9d\xe7\x99\xe7\xf9\xbe\x5f\xbe\x4c\x27\x10\xa9\x2a\xc3\xc7\xe3\xe0\xe4\xd8\xeb\x76\x50\x80\x4f\x63\xa5\xa7\x8f\x4e\xce\x46\xfa\x9f\xbd\x9a\xf6\x2b\xd7\x17\xac\xc1\xee\xd9\x08\x47\x2a\xa2\xbe\x30\xc2\x5a\x7c\xa5\x8a\x1a\xfd\x4d\xf7\x8c\xb2\x98\x30\x2b\x27\xe7\xfe\x67\x7f\x63\xe3\xad\x6a\x0e\x88\xc4\x00\x3f\xe3\x0c\x4d\x41\x15\x5d\xad\xb1\x4a\x7a\xba\x45\x3a\xd5\x7b\xa9\x49\x15\x5a\x07\x68\xc4\x88\xf2\x61\x4a\x74\x1d\x8a\xf9\xbc\x0a\x5c\x78\xe2\xab\xa7\xcb\xd6\xba\x44\xeb\x2b\xe8\xc1\xc6\x60\x18\x89\x87\x8a\x60\x88\x2c\x1e\xb0\x8b\x1c\xcd\xf8\xed\x36\x77\xd5\x15\x94\xef\x19\xa9\xfe\x14\xe8\x2b\x19\x2d\x2b\x19\x73\x2f\x7c\xcf\xda\x75\xba\x5d\x3f\x43\x45\x52\x40\x06\x59\xd0\x17\xd6\x48\x58\x5b\xc2\x77\x7b\x81\x6a\xa0\x1c\x68\x3d\xfe\x2e\x5a\x09\x24\xcd\xba\x73\xe7\xa5\x22\x10\x89\x81\x1e\xdb\x18\x96\x9e\x2a\x86\xb2\xde\xea\xdf\xaa\x2c\x48\x10\x1b\x44\x2b\x9c\x08\xaa\xc9\x28\x12\x05\x81\x83\x8d\x8b\x4b\x03\x3a\xb9\x80\x3b\x8b\x8d\x83\x85\x42\x12\x89\xcb\x30\x1e\x36\x79\x14\x3a\xc8\x93\x27\x87\x89\x11\xba\xd8\x8c\xa0\x30\x8a\x49\x16\x85\x14\x39\x24\x06\x5e\xe0\x3a\x82\xca\x41\x54\x54\x06\x7e\xe1\x5c\xbf\xef\x8d\x9e\x2f\x8f\x72\x3b\x82\xc4\x86\xaa\x3d\x9b\xb2\x5b\x79\x57\x95\x43\x05\x94\xe2\x99\xa2\xeb\x49\x2b\xe9\x98\xa3\x32\xbe\xf9\xf8\xff\x5a\xc4\xc9\x50\xc4\xc5\x43\x62\x91\xc4\x09\x37\x29\xfe\xdb\xd3\xfd\x87\x3f\x11\x83\x4b\x1f\xa6\x52\x7f\xf8\xdf\x70\xb2\x17\x8b\x0d\x79\x63\x99\xbf\xe9\xd6\x7e\x9e\x7e\x7b\x3a\x7d\xef\x46\xeb\xde\xc3\x8b\xfa\xc4\xd4\x62\xea\xcb\xe4\xf3\x85\x1d\x97\xaf\x25\xc7\x4f\x59\x0f\xdf\x6f\xc5\x8f\x03\x31\x28\xa5\x80\xa6\x8c\x9e\xe9\xab\xef\x9c\x28\x4e\xb4\xa5\xef\xce\xcc\xcf\x36\xcc\xbf\xfc\xb8\x0f\xf8\xcf\x0f\xaa\x01\xb6\xf9\x0d\xac\xac\x95\xb3\x6a\xdd\x96\xd0\x16\x9a\x3c\xd8\x69\x25\xef\x5f\xcd\x6b\x77\xb4\x76\xf5\xf6\xd1\xc2\x95\xdd\xc0\x90\x2f\xd0\xfc\xdb\x8c\xa5\xb5\x25\xb9\x5e\xf3\xe3\x6d\xbf\x05\x00\x00\xff\xff\x68\x71\x0b\x2f\xf0\x06\x00\x00")

func resRocketChatLnkBytes() ([]byte, error) {
	return bindataRead(
		_resRocketChatLnk,
		"res/Rocket.Chat.lnk",
	)
}

func resRocketChatLnk() (*asset, error) {
	bytes, err := resRocketChatLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/Rocket.Chat.lnk", size: 1776, mode: os.FileMode(438), modTime: time.Unix(1538528985, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0xbd, 0x7d, 0xef, 0x47, 0x1b, 0x21, 0xa3, 0x9c, 0xe2, 0xb1, 0x6d, 0xcd, 0x86, 0xef, 0xb0, 0x88, 0xd3, 0xdf, 0x5d, 0x80, 0x7, 0xdd, 0xda, 0x3b, 0x45, 0xaa, 0xf0, 0x61, 0xba, 0x2a, 0x9f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/Rocket.Chat.lnk": resRocketChatLnk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"Rocket.Chat.lnk": &bintree{resRocketChatLnk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
